<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>20</y>
      <w>540</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>Class SearchManager
--
Variables:
-NumberOfConfigurations, int
-HashTable&lt;int,game&gt;
-GameSettings
--
Functions:
+run()
+search(gameConfiguration)
--
Responsibilities:
-Manage the search for a winning configuration
-Keep track of number of configurations checked
-Manage the Hash Table</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>580</x>
      <y>20</y>
      <w>390</w>
      <h>590</h>
    </coordinates>
    <panel_attributes>Note..
bg=blue
SW-&gt;Col1
SW-&gt;Col2
SW-&gt;Col3
SW-&gt;Col4
SW-&gt;Col5
SW-&gt;Col6
SW-&gt;Col7
SW-&gt;F

Col1-&gt;Col2
Col1-&gt;Col3
Col1-&gt;Col4
Col1-&gt;Col5
Col1-&gt;Col6
Col1-&gt;Col7
Col1-&gt;F

The above times 7

. - turn over card in stock
r -reset waste to stock

59 Moves

Advance Switches
-m N max number of moves
-o outout file
-x exchange format

Winnable Switches
-m N limit to the number of moves (same as advance)
-c hash table
-f forced safe moves
-v verbose mode
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>990</x>
      <y>20</y>
      <w>390</w>
      <h>820</h>
    </coordinates>
    <panel_attributes>Note..
bg=yellow
Things to keep track of:
How many moves have been made.
Limit on moves.

Waste resets are in the input file. So to set 
the number is part of the file. Since Advance
is checking moves, I think it should update the 
number of resets since it will be creating
a file for the next configuration. 

The output file is not declared on the 
command line. 

Need to test for winning condition. All cards 
in foundation is a win, but no covered cards, 
no stock cards, and one waste card is 
guaranteed.

Need to search recursively, and if using a 
hash table, it will be used to keep from 
following a trail that ultimately loses.
Using a 10,000,000 entry hash table means
The configuration ID must be smaller than 
eight digits.

I have determined there are a total of 59
individual moves. I think that means there
are 59! possibilities. That is 
1.386831185^80 so 81 digit number. 

I was reading an article and one way to
make a series of characters convert to
a number that would maintain their
unique position is to multiply them
bay their position. 
1-&gt;f would be 1*1+2*f.

Verbose mode requires keep track of the 
number of configurations tracked. Checking 
each move means that is a configuration. The
configuration count will need to be incremented 
every time a configuration is sent to advance
for checking. Depth First Search is the default,
but -v just give the total number of configurations
checked, and -c says how many entries in the cache
and enables the cache. It's still a DFS search,
but the cache allows some configuration checks 
to be skipped.  
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>20</x>
      <y>520</y>
      <w>470</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>Note..
bg=orange

Multiply the move location by position in list of moves.

SW = 1
Col1 = 2
Col2 = 3
Col3 = 4
Col4 = 5
Col5 = 6
Col6 = 7
Col7 = 8
F = 9
. = 10
r = 11

SW-&gt;1 2-&gt;5 6-&gt;f = 1*1 + 1*2 + 3*3 + 6*4 + 7*5 + 9*6 =
1 + 2 + 9 + 24 + 35 + 54 = 125


6-&gt;f SW-&gt;1 2-&gt;5 = 7*1 + 9*2 + 1*3 + 1*4 + 3*5 + 6*6 = 
7 + 18 + 3 + 4 + 15 + 36 = 83

I think this will work, and to make sure it doesn't
exceed 10,000,000 I can modulo it. </panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
